nohup: ignoring input
开始循环执行Python脚本...
request_speed范围: 1.0 到 3.4, 步长: 0.4
总迭代次数: 7

[=======                                           ] 14% | 当前request_speed: 1.0You are using the default legacy behaviour of the <class 'transformers.models.llama.tokenization_llama.LlamaTokenizer'>. This is expected, and simply means that the `legacy` (previous) behavior will be used so nothing changes for you. If you want to use the new behaviour, set `legacy=False`. This should only be set if you understand what it means, and thoroughly read the reason why this was added as explained in https://github.com/huggingface/transformers/pull/24565 - if you loaded a llama tokenizer from a GGUF file you can ignore this message
You are using the default legacy behaviour of the <class 'transformers.models.llama.tokenization_llama_fast.LlamaTokenizerFast'>. This is expected, and simply means that the `legacy` (previous) behavior will be used so nothing changes for you. If you want to use the new behaviour, set `legacy=False`. This should only be set if you understand what it means, and thoroughly read the reason why this was added as explained in https://github.com/huggingface/transformers/pull/24565 - if you loaded a llama tokenizer from a GGUF file you can ignore this message.
Loading checkpoint shards:   0%|          | 0/2 [00:00<?, ?it/s]Loading checkpoint shards:  50%|█████     | 1/2 [00:02<00:02,  2.28s/it]Loading checkpoint shards: 100%|██████████| 2/2 [00:03<00:00,  1.43s/it]Loading checkpoint shards: 100%|██████████| 2/2 [00:03<00:00,  1.55s/it]
You are using a model of type eagle to instantiate a model of type llama. This is not supported for all configurations of models and can yield errors.
/data/home/weijh/zyh/emnlp/BE/ours/Parallel_decoding.py:243: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  ea_layer_state_dict = torch.load(model_path, map_location="cpu")
self.tree_buffer: {'attn_mask': [tensor([[[[1., 0., 0., 0.],
          [0., 1., 0., 0.],
          [0., 0., 1., 0.],
          [0., 0., 0., 1.]]]], device='cuda:0'), tensor([[[[1., 0., 0., 0., 1., 0., 0., 0.],
          [1., 0., 0., 0., 0., 1., 0., 0.],
          [1., 0., 0., 0., 0., 0., 1., 0.],
          [0., 1., 0., 0., 0., 0., 0., 1.]]]], device='cuda:0'), tensor([[[[1., 0., 0., 0., 1., 0., 0., 0., 1.]]]], device='cuda:0'), tensor([[[[1., 0., 0., 0., 1., 0., 0., 0., 1., 1.]]]], device='cuda:0')], 'tree_indices': [tensor([0, 1, 2, 3], device='cuda:0'), tensor([ 0,  1,  2, 10], device='cuda:0'), tensor([0], device='cuda:0'), tensor([0], device='cuda:0')], 'position_ids': [tensor([0, 0, 0, 0], device='cuda:0'), tensor([0, 0, 0, 0], device='cuda:0'), tensor([0], device='cuda:0'), tensor([0], device='cuda:0')], 'repeat_nums': [[4], [3, 1], [1], [1]]}
warm up
  0%|          | 0/1 [00:00<?, ?it/s]100%|██████████| 1/1 [00:08<00:00,  8.63s/it]100%|██████████| 1/1 [00:08<00:00,  8.63s/it]
warm up finished
Total progress:   0%|          | 0/30 [00:00<?, ?it/s]Total progress:   0%|          | 0/30 [00:00<?, ?it/s]Total progress:   0%|          | 0/30 [00:00<?, ?it/s]Total progress:   0%|          | 0/30 [00:00<?, ?it/s]Total progress:   0%|          | 0/30 [00:00<?, ?it/s]Total progress:   0%|          | 0/30 [00:00<?, ?it/s]Total progress:   0%|          | 0/30 [00:00<?, ?it/s]Total progress:   0%|          | 0/30 [00:00<?, ?it/s]Total progress:   0%|          | 0/30 [00:00<?, ?it/s]Total progress:   0%|          | 0/30 [00:00<?, ?it/s]Total progress:   0%|          | 0/30 [00:01<?, ?it/s]Total progress:   3%|▎         | 1/30 [00:06<02:50,  5.88s/it]Total progress:   7%|▋         | 2/30 [00:10<02:06,  4.51s/it]Total progress:  10%|█         | 3/30 [00:11<01:14,  2.77s/it]Total progress:  13%|█▎        | 4/30 [00:11<00:50,  1.93s/it]Total progress:  17%|█▋        | 5/30 [00:11<00:31,  1.28s/it]Total progress:  20%|██        | 6/30 [00:12<00:24,  1.04s/it]Total progress:  23%|██▎       | 7/30 [00:13<00:22,  1.04it/s]Total progress:  27%|██▋       | 8/30 [00:13<00:15,  1.43it/s]Total progress:  30%|███       | 9/30 [00:14<00:14,  1.40it/s]Total progress:  33%|███▎      | 10/30 [00:14<00:11,  1.82it/s]Total progress:  37%|███▋      | 11/30 [00:14<00:09,  1.94it/s]Total progress:  40%|████      | 12/30 [00:16<00:16,  1.09it/s]Total progress:  47%|████▋     | 14/30 [00:16<00:08,  1.87it/s]Total progress:  50%|█████     | 15/30 [00:17<00:09,  1.58it/s]Total progress:  53%|█████▎    | 16/30 [00:19<00:13,  1.04it/s]Total progress:  57%|█████▋    | 17/30 [00:20<00:11,  1.16it/s]Total progress:  60%|██████    | 18/30 [00:21<00:12,  1.06s/it]Total progress:  63%|██████▎   | 19/30 [00:22<00:09,  1.21it/s]Total progress:  67%|██████▋   | 20/30 [00:22<00:07,  1.40it/s]